// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod/v3';

export const zGetApiAuthMeData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zGetApiAuthMeResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPostApiAuthLoginData = z.object({
    body: z.object({
        email: z.string().email(),
        password: z.string().min(6)
    }),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPostApiAuthLoginResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPostApiAuthLogoutData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPostApiAuthLogoutResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({}),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPostApiAuthRefreshData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPostApiAuthRefreshResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPostApiAuthRegisterData = z.object({
    body: z.object({
        name: z.string().min(3),
        email: z.string().email(),
        password: z.string().min(8),
        role: z.union([
            z.enum([
                'admin'
            ]),
            z.enum([
                'editor'
            ]),
            z.enum([
                'viewer'
            ])
        ])
    }),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPostApiAuthRegisterResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zDeleteApiUsersByIdData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zDeleteApiUsersByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zGetApiUsersByIdData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zGetApiUsersByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPatchApiUsersByIdData = z.object({
    body: z.object({
        name: z.string(),
        email: z.string().email()
    }).and(z.object({
        password: z.string().min(8)
    })).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPatchApiUsersByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        user: z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zGetApiUsersData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zGetApiUsersResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        users: z.array(z.object({
            id: z.string(),
            name: z.string(),
            email: z.string().email(),
            role: z.union([
                z.enum([
                    'admin'
                ]),
                z.enum([
                    'editor'
                ]),
                z.enum([
                    'viewer'
                ])
            ])
        }))
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zGetApiPostsData = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zGetApiPostsResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        posts: z.array(z.object({
            id: z.string(),
            user_id: z.string(),
            title: z.string(),
            content: z.string(),
            created_at: z.string().datetime(),
            deleted_at: z.union([
                z.string().datetime(),
                z.unknown()
            ])
        }))
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPostApiPostsData = z.object({
    body: z.object({
        title: z.string().min(1).max(240),
        content: z.string().min(1).max(1000)
    }),
    path: z.never().optional(),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPostApiPostsResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        post: z.object({
            id: z.string(),
            user_id: z.string(),
            title: z.string(),
            content: z.string(),
            created_at: z.string().datetime(),
            deleted_at: z.union([
                z.string().datetime(),
                z.unknown()
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zDeleteApiPostsByIdData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zDeleteApiPostsByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        post: z.object({
            id: z.string(),
            user_id: z.string(),
            title: z.string(),
            content: z.string(),
            created_at: z.string().datetime(),
            deleted_at: z.union([
                z.string().datetime(),
                z.unknown()
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zGetApiPostsByIdData = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zGetApiPostsByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        post: z.object({
            id: z.string(),
            user_id: z.string(),
            title: z.string(),
            content: z.string(),
            created_at: z.string().datetime(),
            deleted_at: z.union([
                z.string().datetime(),
                z.unknown()
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');

export const zPatchApiPostsByIdData = z.object({
    body: z.object({
        title: z.string().min(1).max(240).optional(),
        content: z.string().min(1).max(1000).optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional()
});

/**
 * Default Response
 */
export const zPatchApiPostsByIdResponse = z.object({
    status: z.enum([
        'success'
    ]),
    message: z.string(),
    data: z.object({
        post: z.object({
            id: z.string(),
            user_id: z.string(),
            title: z.string(),
            content: z.string(),
            created_at: z.string().datetime(),
            deleted_at: z.union([
                z.string().datetime(),
                z.unknown()
            ])
        })
    }),
    timestamp: z.string().datetime()
}).describe('Default Response');