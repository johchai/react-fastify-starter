// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetApiAuthMeData, GetApiAuthMeResponses, GetApiAuthMeErrors, PostApiAuthLoginData, PostApiAuthLoginResponses, PostApiAuthLoginErrors, PostApiAuthLogoutData, PostApiAuthLogoutResponses, PostApiAuthRefreshData, PostApiAuthRefreshResponses, PostApiAuthRefreshErrors, PostApiAuthRegisterData, PostApiAuthRegisterResponses, PostApiAuthRegisterErrors, DeleteApiUsersByIdData, DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, GetApiUsersByIdData, GetApiUsersByIdResponses, GetApiUsersByIdErrors, PatchApiUsersByIdData, PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, GetApiUsersData, GetApiUsersResponses, GetApiUsersErrors, GetApiPostsData, GetApiPostsResponses, GetApiPostsErrors, PostApiPostsData, PostApiPostsResponses, PostApiPostsErrors, DeleteApiPostsByIdData, DeleteApiPostsByIdResponses, DeleteApiPostsByIdErrors, GetApiPostsByIdData, GetApiPostsByIdResponses, GetApiPostsByIdErrors, PatchApiPostsByIdData, PatchApiPostsByIdResponses, PatchApiPostsByIdErrors } from './types.gen';
import { zGetApiAuthMeData, zGetApiAuthMeResponse, zPostApiAuthLoginData, zPostApiAuthLoginResponse, zPostApiAuthLogoutData, zPostApiAuthLogoutResponse, zPostApiAuthRefreshData, zPostApiAuthRefreshResponse, zPostApiAuthRegisterData, zPostApiAuthRegisterResponse, zDeleteApiUsersByIdData, zDeleteApiUsersByIdResponse, zGetApiUsersByIdData, zGetApiUsersByIdResponse, zPatchApiUsersByIdData, zPatchApiUsersByIdResponse, zGetApiUsersData, zGetApiUsersResponse, zGetApiPostsData, zGetApiPostsResponse, zPostApiPostsData, zPostApiPostsResponse, zDeleteApiPostsByIdData, zDeleteApiPostsByIdResponse, zGetApiPostsByIdData, zGetApiPostsByIdResponse, zPatchApiPostsByIdData, zPatchApiPostsByIdResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiAuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetApiAuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAuthMeResponses, GetApiAuthMeErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiAuthMeData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiAuthMeResponse.parseAsync(data);
        },
        url: '/api/auth/me',
        ...options
    });
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiAuthLoginData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostApiAuthLoginResponse.parseAsync(data);
        },
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthLogoutResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiAuthLogoutData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostApiAuthLogoutResponse.parseAsync(data);
        },
        url: '/api/auth/logout',
        ...options
    });
};

export const postApiAuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthRefreshResponses, PostApiAuthRefreshErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiAuthRefreshData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostApiAuthRefreshResponse.parseAsync(data);
        },
        url: '/api/auth/refresh',
        ...options
    });
};

export const postApiAuthRegister = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiAuthRegisterResponses, PostApiAuthRegisterErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiAuthRegisterData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostApiAuthRegisterResponse.parseAsync(data);
        },
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiUsersByIdResponses, DeleteApiUsersByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteApiUsersByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zDeleteApiUsersByIdResponse.parseAsync(data);
        },
        url: '/api/users/{id}',
        ...options
    });
};

export const getApiUsersById = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUsersByIdResponses, GetApiUsersByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiUsersByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiUsersByIdResponse.parseAsync(data);
        },
        url: '/api/users/{id}',
        ...options
    });
};

export const patchApiUsersById = <ThrowOnError extends boolean = false>(options: Options<PatchApiUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiUsersByIdResponses, PatchApiUsersByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPatchApiUsersByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPatchApiUsersByIdResponse.parseAsync(data);
        },
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiUsers = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUsersResponses, GetApiUsersErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiUsersData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiUsersResponse.parseAsync(data);
        },
        url: '/api/users/',
        ...options
    });
};

export const getApiPosts = <ThrowOnError extends boolean = false>(options?: Options<GetApiPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiPostsResponses, GetApiPostsErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiPostsData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiPostsResponse.parseAsync(data);
        },
        url: '/api/posts/',
        ...options
    });
};

export const postApiPosts = <ThrowOnError extends boolean = false>(options: Options<PostApiPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPostsResponses, PostApiPostsErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiPostsData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostApiPostsResponse.parseAsync(data);
        },
        url: '/api/posts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiPostsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiPostsByIdResponses, DeleteApiPostsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteApiPostsByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zDeleteApiPostsByIdResponse.parseAsync(data);
        },
        url: '/api/posts/{id}',
        ...options
    });
};

export const getApiPostsById = <ThrowOnError extends boolean = false>(options: Options<GetApiPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPostsByIdResponses, GetApiPostsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetApiPostsByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiPostsByIdResponse.parseAsync(data);
        },
        url: '/api/posts/{id}',
        ...options
    });
};

export const patchApiPostsById = <ThrowOnError extends boolean = false>(options: Options<PatchApiPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiPostsByIdResponses, PatchApiPostsByIdErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPatchApiPostsByIdData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPatchApiPostsByIdResponse.parseAsync(data);
        },
        url: '/api/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};