// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getApiAuthMe, postApiAuthLogin, postApiAuthLogout, postApiAuthRefresh, postApiAuthRegister, deleteApiUsersById, getApiUsersById, patchApiUsersById, getApiUsers, getApiPosts, postApiPosts, deleteApiPostsById, getApiPostsById, patchApiPostsById } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetApiAuthMeData, PostApiAuthLoginData, PostApiAuthLoginError, PostApiAuthLoginResponse, PostApiAuthLogoutData, PostApiAuthLogoutResponse, PostApiAuthRefreshData, PostApiAuthRefreshError, PostApiAuthRefreshResponse, PostApiAuthRegisterData, PostApiAuthRegisterError, PostApiAuthRegisterResponse, DeleteApiUsersByIdData, DeleteApiUsersByIdError, DeleteApiUsersByIdResponse, GetApiUsersByIdData, PatchApiUsersByIdData, PatchApiUsersByIdError, PatchApiUsersByIdResponse, GetApiUsersData, GetApiPostsData, PostApiPostsData, PostApiPostsError, PostApiPostsResponse, DeleteApiPostsByIdData, DeleteApiPostsByIdError, DeleteApiPostsByIdResponse, GetApiPostsByIdData, PatchApiPostsByIdData, PatchApiPostsByIdError, PatchApiPostsByIdResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getApiAuthMeQueryKey = (options?: Options<GetApiAuthMeData>) => createQueryKey('getApiAuthMe', options);

export const getApiAuthMeOptions = (options?: Options<GetApiAuthMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAuthMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAuthMeQueryKey(options)
    });
};

export const postApiAuthLoginQueryKey = (options: Options<PostApiAuthLoginData>) => createQueryKey('postApiAuthLogin', options);

export const postApiAuthLoginOptions = (options: Options<PostApiAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthLoginQueryKey(options)
    });
};

export const postApiAuthLoginMutation = (options?: Partial<Options<PostApiAuthLoginData>>): UseMutationOptions<PostApiAuthLoginResponse, PostApiAuthLoginError, Options<PostApiAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthLoginResponse, PostApiAuthLoginError, Options<PostApiAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthLogoutQueryKey = (options?: Options<PostApiAuthLogoutData>) => createQueryKey('postApiAuthLogout', options);

export const postApiAuthLogoutOptions = (options?: Options<PostApiAuthLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthLogoutQueryKey(options)
    });
};

export const postApiAuthLogoutMutation = (options?: Partial<Options<PostApiAuthLogoutData>>): UseMutationOptions<PostApiAuthLogoutResponse, DefaultError, Options<PostApiAuthLogoutData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthLogoutResponse, DefaultError, Options<PostApiAuthLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthRefreshQueryKey = (options?: Options<PostApiAuthRefreshData>) => createQueryKey('postApiAuthRefresh', options);

export const postApiAuthRefreshOptions = (options?: Options<PostApiAuthRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthRefreshQueryKey(options)
    });
};

export const postApiAuthRefreshMutation = (options?: Partial<Options<PostApiAuthRefreshData>>): UseMutationOptions<PostApiAuthRefreshResponse, PostApiAuthRefreshError, Options<PostApiAuthRefreshData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthRefreshResponse, PostApiAuthRefreshError, Options<PostApiAuthRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthRegisterQueryKey = (options: Options<PostApiAuthRegisterData>) => createQueryKey('postApiAuthRegister', options);

export const postApiAuthRegisterOptions = (options: Options<PostApiAuthRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthRegisterQueryKey(options)
    });
};

export const postApiAuthRegisterMutation = (options?: Partial<Options<PostApiAuthRegisterData>>): UseMutationOptions<PostApiAuthRegisterResponse, PostApiAuthRegisterError, Options<PostApiAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<PostApiAuthRegisterResponse, PostApiAuthRegisterError, Options<PostApiAuthRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiUsersByIdMutation = (options?: Partial<Options<DeleteApiUsersByIdData>>): UseMutationOptions<DeleteApiUsersByIdResponse, DeleteApiUsersByIdError, Options<DeleteApiUsersByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUsersByIdResponse, DeleteApiUsersByIdError, Options<DeleteApiUsersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiUsersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersByIdQueryKey = (options: Options<GetApiUsersByIdData>) => createQueryKey('getApiUsersById', options);

export const getApiUsersByIdOptions = (options: Options<GetApiUsersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersByIdQueryKey(options)
    });
};

export const patchApiUsersByIdMutation = (options?: Partial<Options<PatchApiUsersByIdData>>): UseMutationOptions<PatchApiUsersByIdResponse, PatchApiUsersByIdError, Options<PatchApiUsersByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiUsersByIdResponse, PatchApiUsersByIdError, Options<PatchApiUsersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiUsersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersQueryKey = (options?: Options<GetApiUsersData>) => createQueryKey('getApiUsers', options);

export const getApiUsersOptions = (options?: Options<GetApiUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersQueryKey(options)
    });
};

export const getApiPostsQueryKey = (options?: Options<GetApiPostsData>) => createQueryKey('getApiPosts', options);

export const getApiPostsOptions = (options?: Options<GetApiPostsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPosts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPostsQueryKey(options)
    });
};

export const postApiPostsQueryKey = (options: Options<PostApiPostsData>) => createQueryKey('postApiPosts', options);

export const postApiPostsOptions = (options: Options<PostApiPostsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPosts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPostsQueryKey(options)
    });
};

export const postApiPostsMutation = (options?: Partial<Options<PostApiPostsData>>): UseMutationOptions<PostApiPostsResponse, PostApiPostsError, Options<PostApiPostsData>> => {
    const mutationOptions: UseMutationOptions<PostApiPostsResponse, PostApiPostsError, Options<PostApiPostsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPosts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiPostsByIdMutation = (options?: Partial<Options<DeleteApiPostsByIdData>>): UseMutationOptions<DeleteApiPostsByIdResponse, DeleteApiPostsByIdError, Options<DeleteApiPostsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiPostsByIdResponse, DeleteApiPostsByIdError, Options<DeleteApiPostsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiPostsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPostsByIdQueryKey = (options: Options<GetApiPostsByIdData>) => createQueryKey('getApiPostsById', options);

export const getApiPostsByIdOptions = (options: Options<GetApiPostsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPostsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPostsByIdQueryKey(options)
    });
};

export const patchApiPostsByIdMutation = (options?: Partial<Options<PatchApiPostsByIdData>>): UseMutationOptions<PatchApiPostsByIdResponse, PatchApiPostsByIdError, Options<PatchApiPostsByIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiPostsByIdResponse, PatchApiPostsByIdError, Options<PatchApiPostsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiPostsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};